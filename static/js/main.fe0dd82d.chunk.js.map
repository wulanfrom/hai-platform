{"version":3,"sources":["components/Banner/Banner.js","components/GetStarted/GetStarted.js","components/Banner/Progress.js","components/DropZone/ListItem.js","components/DropZone/DropZone.js","components/ChooseModel/Card.js","components/Explore/Explore.js","components/Navigation/Navigation.js","components/ModelTable/TableBody.js","components/ModelTable/LimeTable.js","components/ModelTable/ShapTable.js","components/GiveExplanation/GiveExplanation.js","components/Summary/SummaryCard.js","components/Summary/Summary.js","components/LabelPage/LabelPage.js","components/MasterUpload/MasterUpload.js","App.js","serviceWorker.js","index.js"],"names":["Banner","className","GetStarted","Button","href","type","useStyles","makeStyles","theme","root","width","button","marginRight","spacing","instructions","marginTop","marginBottom","Progress","props","classes","React","useState","Set","steps","activeStep","currentStep","Stepper","map","label","index","labelProps","Step","key","StepLabel","ListItem","data","i","fileSize","fileType","errorMessage","imageIcon","useRef","removeFile","openImageModal","useEffect","file","reader","FileReader","readAsDataURL","onload","e","current","style","backgroundImage","target","result","loadImage","onClick","invalid","name","ref","DropZone","selectedFiles","setSelectedFiles","setErrorMessage","validFiles","setValidFiles","unsupportedFiles","setUnsupportedFiles","fileInputRef","modalImageRef","modalRef","filteredArray","reduce","find","item","concat","res","length","checkNext","getImages","handleFiles","files","validateFile","prevArray","addData","id","agreeLabel","agreeExp","explanation","LIMEPic","indexOf","size","Math","floor","log","parseFloat","pow","toFixed","validFileIndex","findIndex","splice","selectedFileIndex","unsupportedFileIndex","getDeletedItem","display","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","dataTransfer","click","multiple","onChange","fileName","substring","lastIndexOf","Card","dataName","dataLabel","imageRef","agreeValue","setAgreeValue","values","sendChangedData","ButtonGroup","toggle","value","radio","idx","ToggleButton","variant","checked","currentTarget","Explore","Navigation","Navbar","collapseOnSelect","bg","Brand","Nav","Link","Component","TableBody","expRef","expAgree","setExpAgree","setExplanation","sendChangedExplanation","Form","Group","controlId","Label","Control","as","rows","LimeTable","allData","updatedList","eachCard","sendExpToGive","Table","striped","bordered","hover","ShapTable","GiveExplanation","selectedModel","updateModel","dropdownVal","changeDropdownVal","showTable","changeShow","improvement","updateImprovement","sendExpToMasterUpload","sendImprovement","SummaryCard","labelName","orgImgRef","modelImgRef","modalOpen","updateModal","closeModal","Img","Body","Text","Modal","dialogClassName","show","onHide","Header","closeButton","Title","Footer","Summary","totalData","tab1Data","filter","tab2Data","tab3Data","tab4Data","triggerResetFunction","LabelPage","setAllData","updateAllData","MasterUpload","setCurrentStep","setUploadedImages","validNext","setValidNext","handleNext","step","prevActiveStep","handleBack","console","getPrevButton","disabled","getNextButton","imageList","validity","modifiedList","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe0dd82d.chunk.js","sourcesContent":["import React from 'react'\nimport '../../App.css'\n\nexport default function Banner() {\n    return (\n        <div className=\"banner-wrapper p-4\">\n            <h1>Welcome to the XAI Platform</h1>\n            <p>This platform allows you to upload pictures and apply explainability models to it. You will work with methods for explaining model predictions in image classification tasks. Such explanations help users resolve questions around what’s happening inside of the classification model and why. As users explore these explanations, they may come up with additional questions about the model, which possibly requires other kinds of explanations.</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport Banner from '../Banner/Banner'\n\n// Bootstrap components\nimport Button from 'react-bootstrap/Button'\n\nexport default function GetStarted() {\n    return (\n        <div>\n            <Banner />\n            \n            <div className=\"proceed-wrapper p-4\">\n                <h2>What Should I Do?</h2>\n                <ul className=\"what-to-do ml-5\">\n                    <li>\n                        <p>Try the platform with several pictures</p>\n                        <p>Does the model label them correctly?</p>\n                    </li>\n                    <li>\n                        <p>Apply explainability models to those pictures.</p>\n                        <p>Did you find any image for which the algorithm does not give an explanation that is easy to understand for users?</p>\n                    </li>\n                    <li>\n                        <p>Is the explanation sufficient to trust the model predictions?</p>\n                        <p>When is it sufficient? When is it not sufficient? </p>\n                    </li>\n                    <li>\n                        <p>For insufficient predictions, what can you do to make the model label it correctly?</p>\n                        <p>What kinds of additional information would you include in your explanation?</p>\n                    </li>\n                </ul>\n                <div className=\"mx-auto\">\n                    <Button href=\"/hai-platform/upload\" type=\"button\" className=\"getStarted-btn\">Get Started</Button>\n                </div>\n                <hr></hr>\n\n                <h2 className=\"mt-4\">Explore What Others Found</h2>\n                <p>Explore the observations done by other users and compare it to yours.</p>\n                <Button href=\"/hai-platform/explore\" className=\"explore-btn\">Explore</Button>\n\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { useHistory } from \"react-router-dom\"; \nimport './Progress.css'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction getSteps() {\n  return ['UPLOAD', 'APPLY MODEL', 'GET EXPLANATION', 'SUMMARIZE & SHARE'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Upload pictures to apply the model on';\n    case 1:\n      return 'Label model to pictures';\n    case 2:\n      return 'Does the explanation make sense?';\n    case 3:\n      return 'What did you learn?';\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function Progress(props) {\n  const classes = useStyles();\n  // const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n  const activeStep = props.currentStep;\n\n  return (\n    // <div className={classes.root}>\n    <div className={'progressWrapper ' + classes.root}>\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          const stepProps = {};\n          const labelProps = {};\n          return (\n            <Step key={label} {...stepProps}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n    </div>\n  );\n}\n","import React, { useRef, useEffect } from 'react'\nimport './ListItem.css'\n\nexport default function ListItem(props) {\n    const data = props.data;\n    const i = props.key;\n    const fileSize = props.fileSize;\n    const fileType = props.fileType;\n    const errorMessage = props.errorMessage;\n    const imageIcon = useRef();\n    const removeFile = props.removeFile;\n    const openImageModal = props.openImageModal;\n\n    const loadImage = (file) => {\n        const reader = new FileReader();\n        // modalRef.current.style.display = \"block\";\n        reader.readAsDataURL(file);\n        reader.onload = function(e) {\n            imageIcon.current.style.backgroundImage = `url(${e.target.result})`;\n        }\n    }\n\n     // on mount\n     useEffect(() => {\n        loadImage(data);\n    }, []);\n\n    return (\n        <div>\n            <div className=\"file-status-bar\" key={i}>\n                <div onClick={!data.invalid ? () => openImageModal(data) : () => removeFile(data.name)}>\n                    <div className=\"file-type-logo\" ref={ imageIcon }>\n                        <div className=\"file-type\">{ fileType }</div>\n                    </div>\n                    <span className={`file-name ${data.invalid ? 'file-error' : ''}`}>{data.name}</span>\n                    <span className=\"file-size\">({ fileSize })</span> {data.invalid && <span className='file-error-message'>({errorMessage})</span>}\n                </div>\n                <div className=\"file-remove\" onClick={() => {removeFile(data.name)}}>X</div>\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport './DropZone.css'\n\n// Bootstrap components\nimport Button from 'react-bootstrap/Button'\nimport { faAddressCard } from '@fortawesome/free-solid-svg-icons';\n\n// pages\nimport ListItem from './ListItem'\n\nexport default function DropZone(props) {\n    const [selectedFiles, setSelectedFiles] = useState([]); // all files dropped to the zone\n    const [errorMessage, setErrorMessage] = useState(''); \n    const [validFiles, setValidFiles] = useState([]); // all the non duplicated files\n    const [unsupportedFiles, setUnsupportedFiles] = useState([]); // displays invalid files\n    \n    // For adding input by clicking\n    const fileInputRef = useRef();\n    const imageIcon = useRef();\n\n    const fileInputClicked = () => {\n        fileInputRef.current.click();\n    }\n\n    const filesSelected = () => {\n        if (fileInputRef.current.files.length) {\n            handleFiles(fileInputRef.current.files);\n        }\n    }\n\n    // Display images\n    const modalImageRef = useRef();\n    const modalRef = useRef();\n\n    // on mount\n    useEffect(() => {\n\n    }, []);\n\n    // Remove duplicate files\n    useEffect(() => {\n        let filteredArray = selectedFiles.reduce((file, current) => {\n            const x = file.find(item => item.name === current.name);\n            if (!x) {\n                return file.concat([current]);\n            } else {\n                return file;\n            }\n        }, []);\n        setValidFiles([...filteredArray]);\n    }, [selectedFiles]);\n\n    // control the next button of the steps\n    useEffect(() => {\n        const res = unsupportedFiles.length === 0 && validFiles.length > 0;\n        props.checkNext(res);\n        props.getImages(validFiles);\n    }, [unsupportedFiles, validFiles])\n\n\n    // Methods for handling events\n    const dragOver = (e) => {\n        e.preventDefault();\n    }\n    \n    const dragEnter = (e) => {\n        e.preventDefault();\n    }\n    \n    const dragLeave = (e) => {\n        e.preventDefault();\n    }\n    \n    const fileDrop = (e) => {\n        e.preventDefault();\n        const files = e.dataTransfer.files;\n        if (files.length) {\n            handleFiles(files);\n        }\n    }\n\n    // Handles files when you upload them\n    const handleFiles = (files) => {\n        for (let i = 0; i < files.length; i++) {\n            if (validateFile(files[i])) {\n                // add to an array so we can display the name of file\n                setSelectedFiles(prevArray => [...prevArray, files[i]]);\n                // applyIcon(files[i]);\n                \n                // create new card post? and add to globalCardList\n                props.addData({\n                    id: files[i].name,\n                    data: files[i],\n                    agreeLabel: 0,\n                    agreeExp: 0,\n                    explanation: \"\",\n                    LIMEPic: null,\n                    label: \"\",\n                })\n            } else {\n                // add a new property called invalid\n                files[i]['invalid'] = true;\n                // add to the same array so we can display the name of the file\n                setSelectedFiles(prevArray => [...prevArray, files[i]]);\n                // set error message\n                setErrorMessage('File type not permitted');\n                // add files that are invalid\n                setUnsupportedFiles(prevArray => [...prevArray, files[i]]);\n                // applyIcon(files[i]);\n            }\n        }\n    }\n\n    // checks the validity of the files\n    const validateFile = (file) => {\n        const validTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n        if (validTypes.indexOf(file.type) === -1) {\n            return false;\n        }\n        return true;\n    }\n\n    // checks the size of a file\n    const fileSize = (size) => {\n        if (size === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        const i = Math.floor(Math.log(size) / Math.log(k));\n        return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    // Get the type of file\n    const fileType = (fileName) => {\n        return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n    }\n\n    // Remove selected file\n    const removeFile = (name) => {\n        // find the index of the item\n        // remove the item from array\n        const validFileIndex = validFiles.findIndex(e => e.name === name);\n        validFiles.splice(validFileIndex, 1);\n\n        // update validFiles array\n        setValidFiles([...validFiles]);\n        const selectedFileIndex = selectedFiles.findIndex(e => e.name === name);\n        selectedFiles.splice(selectedFileIndex, 1);\n\n        // update selectedFiles array\n        setSelectedFiles([...selectedFiles]);\n\n        // delete from unsupported files\n        const unsupportedFileIndex = unsupportedFiles.findIndex(e => e.name === name);\n        if (unsupportedFileIndex !== -1) {\n            unsupportedFiles.splice(unsupportedFileIndex, 1);\n            // update unsupportedFiles array\n            setUnsupportedFiles([...unsupportedFiles]);\n        }\n\n        // send name of deleted item to the master upload\n        props.getDeletedItem(name);\n    }\n\n    const openImageModal = (file) => {\n        const reader = new FileReader();\n        modalRef.current.style.display = \"block\";\n        reader.readAsDataURL(file);\n        reader.onload = function(e) {\n            modalImageRef.current.style.backgroundImage = `url(${e.target.result})`;\n        }\n    }\n\n    // const applyIcon = (file) => {\n    //     const reader = new FileReader();\n    //     reader.readAsDataURL(file);\n    //     reader.onload = function(e) {\n    //         imageIcon.current.style.backgroundImage = `url(${e.target.result})`;\n    //     }\n    // }\n\n    const closeModal = () => {\n        modalRef.current.style.display = \"none\";\n        modalImageRef.current.style.backgroundImage = 'none';\n    }\n\n    const uploadFiles = () => {\n    }\n    \n    return (\n        <div>\n            <div>\n                {/* <p className=\"title\">React Drag and Drop Image Upload</p> */}\n                <div className=\"container\">\n                    {/* {unsupportedFiles.length === 0 && validFiles.length ? <Button className=\"file-upload-btn\" onClick={() => uploadFiles()}>Upload Files</Button> : ''}  */}\n                    {unsupportedFiles.length ? <p>Please remove all unsupported files.</p> : ''}\n                    {/* <p>Validity of Next: {(unsupportedFiles.length === 0 && validFiles.length > 0).toString()}</p> */}\n                    {/* <p>Validity of Next: { validityOfNext.toString() }</p> */}\n                    <div className=\"drop-container\" \n                        onDragOver={dragOver}\n                        onDragEnter={dragEnter}\n                        onDragLeave={dragLeave}\n                        onDrop={fileDrop}\n                        onClick={fileInputClicked}>\n                        <div className=\"drop-message\">\n                            <input\n                                ref={fileInputRef}\n                                className=\"file-input\"\n                                type=\"file\"\n                                multiple\n                                onChange={filesSelected} />\n                            <div className=\"upload-icon\"></div>\n                            Drag & Drop files here or click to upload\n                        </div>\n                    </div>\n                    <div className=\"file-display-container\">\n                    {\n                        validFiles.map((data, i) => \n                            <div>\n                                <ListItem data={data} key={i} fileSize={fileSize(data.size)} fileType={fileType(data.name)} errorMessage={errorMessage} openImageModal={openImageModal} removeFile={removeFile}/>\n                            </div>\n                        )\n                    }\n                    </div>\n                </div>\n                <div className=\"modal\" ref={ modalRef }>\n                    <div className=\"overlay\"></div>\n                    <span className=\"close\" onClick={(() => closeModal())}>X</span>\n                    <div className=\"modal-image\" ref={modalImageRef}></div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n","import React, { useEffect, useRef, useState }from 'react'\n\n// // React components\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport './Card.css'\n\nexport default function Card(props) {\n    const data = props.data;\n    const dataName = props.name;\n    const dataLabel = props.label;\n    const imageRef = useRef();\n    const [agreeValue, setAgreeValue] = useState(0); //set the do you agree with the lab to false\n    var values = {\n        id: dataName,\n        data: data,\n        agreeLabel: agreeValue,\n        agreeExp: 0,\n        explanation: \"\",\n        LIMEPic: null,\n    }\n\n\n    // add images to the cards\n    const loadImage = (file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function(e) {\n            imageRef.current.style.backgroundImage = `url(${e.target.result})`;\n        }\n    }\n\n    // send data everytime the photo is updated\n    useEffect(() => {\n        values = {\n            id: dataName,\n            // data: data,\n            agreeLabel: agreeValue,\n            label: dataLabel,\n            // agreeExp: 0,\n            // explanation: \"\",\n            // LIMEPic: null,\n        }\n        // send changed data to parent\n        props.sendChangedData(values);\n        // console.log(\"radio button changed\");\n    }, [agreeValue]);\n\n    const radios = [\n        { name: 'Yes', value: '1' },\n        { name: 'No', value: '0' },\n    ];\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        // Update the document title using the browser API\n        loadImage(data);\n    }, []);\n\n    return (\n        <div className=\"card-wrapper\">\n            <div className=\"card-container\">\n                <div className=\"photo-container\" ref={ imageRef }></div>\n                <div>\n                    <p className=\"card-label\">Label</p>\n                    <p>{ dataLabel }</p>\n                    <div>\n                        <p className=\"card-label\">Do you Agree with the Label?</p>\n                        <ButtonGroup toggle>\n                            {radios.map((radio, idx) => (\n                                <ToggleButton\n                                    key={idx}\n                                    type=\"radio\"\n                                    variant=\"secondary\"\n                                    name=\"radio\"\n                                    value={radio.value}\n                                    checked={ agreeValue == radio.value }\n                                    onChange={(e) => setAgreeValue(e.currentTarget.value)}\n                                >\n                                    {radio.name}\n                                </ToggleButton>\n                            ))}\n                        </ButtonGroup>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport Progress from '../Banner/Progress'\n\nexport default function Explore() {\n    return (\n        <div>\n            <h1>Explore Page</h1>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport {\n    BrowserRouter as Router,\n    Switch, \n    Link,\n    Route\n} from 'react-router-dom';\n\n\n// Pages\nimport GetStarted from '../GetStarted/GetStarted'\nimport Upload from '../ApplyModels/Upload'\nimport Explore from '../Explore/Explore'\n\n\nexport default class Navigation extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar collapseOnSelect bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href=\"/hai-platform/getStarted\">XAIPlatform</Navbar.Brand>\n                    <Nav className=\"ml-auto\">\n                        <Nav.Link href=\"/hai-platform/getStarted\">Get Started</Nav.Link>\n                        <Nav.Link href=\"/hai-platform/upload\">Apply Models</Nav.Link>\n                        <Nav.Link href=\"/hai-platform/explore\">Explore</Nav.Link>\n                    </Nav>\n                </Navbar>\n            </div>\n        )\n    }\n}\n","import React, { useRef, useState, useEffect } from 'react'\n\nimport './TableBody.css'\n\n// bootstrap components\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport Form from 'react-bootstrap/Form'\n\nexport default function TableBody(props) {\n    const data = props.data;\n    const imageRef = useRef();\n    const expRef = useRef();\n    const [expAgree, setExpAgree] = useState(data.agreeExp); //set the do you agree with the lab to false\n    const [explanation, setExplanation] = useState(data.explanation);\n    var values = {\n        id: data.id,\n        // data: data,\n        // agreeLabel: agreeValue,\n        agreeExp: expAgree,\n        explanation: explanation,\n        LIMEPic: null,\n    }\n\n    // add images to the table\n    const loadImage = (file, imageRef) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function(e) {\n            imageRef.current.style.backgroundImage = `url(${e.target.result})`;\n        }\n    }\n\n    // Similar to componentDidMount and componentDidUpdate:\n     useEffect(() => {\n        // Update the document title using the browser API\n        loadImage(data.data, imageRef);\n        loadImage(data.data, expRef);\n    }, []);\n\n\n    // update the data's explanation\n    const updateExplanation = (e) => {\n        setExplanation(e.target.value);\n    }\n\n    // send data to LimeTable whenever the expAgree and explanation changes.\n    useEffect(() => {\n        values = {\n            id: data.id,\n            // data: data,\n            agreeExp: expAgree,\n            // agreeExp: 0,\n            explanation: explanation,\n            // LIMEPic: null,\n        }\n\n        // send changed data to parent\n        props.sendChangedExplanation(values);\n        // console.log(\"radio button changed\");\n    }, [expAgree, explanation]);\n\n    const radios = [\n        { name: 'Yes', value: '1' },\n        { name: 'No', value: '0' },\n    ];\n\n    return (\n        // <div>\n        <tr>\n            <td>\n                <div>\n                    {/* image */}\n                    <div className=\"image-container\" ref={ imageRef }></div>\n                    {/* image name */}\n                    <p>{ data.id }</p>\n                </div>\n            </td>\n            <td>\n                {/* Put lime picture here */}\n                <div className=\"exp-container\" ref={ expRef }></div>\n            </td>\n            <td>\n                <div className=\"labelName\">\n                    <p>Label</p>\n                    {/* Put result of label here */}\n                    <p>{ data.label }</p>\n                </div>\n                <div className=\"agreeLabel\">\n                    <p>Is the explanation easy to understand?</p>\n                    <ButtonGroup toggle>\n                        {radios.map((radio, idx) => (\n                            <ToggleButton\n                                key={idx}\n                                type=\"radio\"\n                                variant=\"secondary\"\n                                name=\"radio\"\n                                value={radio.value}\n                                checked={ expAgree == radio.value }\n                                onChange={(e) => setExpAgree(e.currentTarget.value)}\n                            >\n                                {radio.name}\n                            </ToggleButton>\n                        ))}\n                    </ButtonGroup>\n                </div>\n                <div>\n                    <Form.Group controlId=\"explanationTextArea\">\n                        <Form.Label>Is the Explanation Sufficient to Trust the model prediction?</Form.Label>\n                        {/* whenever it changes, update the globaldata in master upload */}\n                        <Form.Control as=\"textarea\" value={ explanation } rows={3} onChange={ updateExplanation } />\n                    </Form.Group>\n                </div>\n            </td>\n        </tr>\n        // </div>\n    )\n}\n","import React, { useState } from 'react'\n\n// react components\nimport Table from 'react-bootstrap/Table'\n\n// pages\nimport TableBody from '../ModelTable/TableBody'\n\nexport default function LimeTable(props) {\n    const [allData, updateData] = useState(props.data);\n\n    // received changed data from Card whenever the agree value is changed\n    // assign it to the editAgreeId\n    const sendChangedExplanation = (data) => {\n        const updatedList = allData.map(eachCard => {\n            // if they have the same id\n            if (eachCard.id == data.id) {\n                let item = eachCard;\n                item.explanation = data.explanation;\n                item.agreeExp = data.agreeExp;\n            }\n            return eachCard\n        });\n\n        //send the data to the Give Explanation\n        props.sendExpToGive(updatedList);\n    }\n\n    const rows = allData.map((data, i) => {\n        return (\n            <TableBody data={data} key={i} sendChangedExplanation = { sendChangedExplanation }/>\n        )\n    });\n\n    return (\n        <div>\n            <p>This is the lime table</p>\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Input Image</th>\n                        <th>Explanation</th>\n                        <th>Label</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { rows }\n                </tbody>\n            </Table>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\n\n// react components\nimport Table from 'react-bootstrap/Table'\n\n// pages\nimport TableBody from '../ModelTable/TableBody'\n\nexport default function ShapTable(props) {\n    const [allData, updateData] = useState(props.data);\n\n    // received changed data from Card whenever the agree value is changed\n    // assign it to the editAgreeId\n    const sendChangedExplanation = (data) => {\n        const updatedList = allData.map(eachCard => {\n            // if they have the same id\n            if (eachCard.id == data.id) {\n                let item = eachCard;\n                item.explanation = data.explanation;\n                item.agreeExp = data.agreeExp;\n            }\n            return eachCard\n        });\n\n        //send the data to the Give Explanation\n        props.sendExpToGive(updatedList);\n    }\n\n    const rows = allData.map((data, i) => {\n        return (\n            <TableBody data={data} key={i} sendChangedExplanation = { sendChangedExplanation }/>\n        )\n    });\n\n    return (\n        <div>\n            <p>This is the Shap table</p>\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Input Image</th>\n                        <th>Explanation</th>\n                        <th>Label</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { rows }\n                </tbody>\n            </Table>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport './GiveExplanation.css'\n\n// Bootstrap components\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\n// Pages \nimport LimeTable from '../ModelTable/LimeTable'\nimport ShapTable from '../ModelTable/ShapTable'\n\n\nexport default function GiveExplanation(props) {\n    const [selectedModel, updateModel] = useState(\"lime\");\n    const [dropdownVal, changeDropdownVal] = useState(\"lime\");\n    const [showTable, changeShow] = useState(false);\n    const [allData, updateData] = useState(props.data);\n    const [improvement, updateImprovement] = useState(props.improvement);\n\n    //update the value of the selection depending on the dropdown\n    const changeModel = () => {\n        updateModel(dropdownVal);\n        changeShow(true);\n    }\n\n    // get value of selected model\n    const getDropdownVal = (e) => {\n        changeDropdownVal(e.target.value);\n    }\n\n    // receives data from limeTable/ShapTable and sends it to master upload page\n    const sendExpToGive = (updatedList) => {\n        //send the data to the Give Explanation\n        props.sendExpToMasterUpload(updatedList);\n    }\n\n    \n    const changeImprovement = (e) => {\n        updateImprovement(e.target.value);\n    }\n\n    // update the improvement whenever it changes the text area\n    useEffect(() => {\n        props.sendImprovement(improvement);\n    }, [improvement]);\n\n    return (\n        <div>\n            <Form>\n            <Form.Group controlId=\"explainabilityModelSelect\">\n                <Form.Label>Choose an Explainability Model</Form.Label>\n                <Form.Control as=\"select\" value={ dropdownVal } onChange={ getDropdownVal } >\n                    <option value=\"lime\">LIME</option>\n                    <option value=\"shap\">SHAP</option>\n                </Form.Control>\n            </Form.Group>\n            <Button variant=\"primary\" onClick = { changeModel }>Apply Explanation</Button>\n            </Form>\n            <div>\n                { selectedModel == \"lime\" && showTable ? <LimeTable data={ allData } sendExpToGive = { sendExpToGive }/> : \"\" }\n                { selectedModel == \"shap\" && showTable ? <ShapTable data={ allData } sendExpToGive = { sendExpToGive }/> : \"\" }\n            </div>\n            <div>\n                <Form.Group controlId=\"improvementTextArea\" className=\"improvementTextArea\">\n                    <Form.Label>What can you do to make the model label images correctly?</Form.Label>\n                    <p className=\"improvementLabel\">What kinds of additional information would you include in your explanation?</p>\n                    {/* whenever it changes, update the globaldata in master upload */}\n                    <Form.Control as=\"textarea\" value={ improvement } rows={3} onChange={ changeImprovement } />\n                </Form.Group>\n            </div>\n        </div>\n    )\n}\n","import React, { useRef, useEffect, useState } from 'react'\nimport './SummaryCard.css'\n\n// bootstrap components\nimport Card from 'react-bootstrap/Card'\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nexport default function SummaryCard(props) {\n    const data = props.data.data;\n    const labelName = props.data.label;\n    const explanation = props.data.explanation;\n    const imageRef = useRef(); //for the card image\n    const orgImgRef = useRef(); //for the original image\n    const modelImgRef = useRef(); //for the explanation image\n    const [modalOpen, updateModal] = useState(false); //checks whether the modal is open\n\n    // openModal\n    const openModal = () => {\n        updateModal(true);\n        loadImage(data, orgImgRef);\n        loadImage(data, modelImgRef);\n    }\n\n    // closeModal\n    const closeModal = () => {\n        updateModal(false);\n    }\n\n    // add images to the cards\n    const loadImage = (file, imageRef) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function(e) {\n            imageRef.current.style.backgroundImage = `url(${e.target.result})`; //for the card picture\n        }\n    }\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        // Update the document title using the browser API\n        loadImage(data, imageRef);\n        // loadImage(data, orgImgRef);\n    }, []);\n\n    return (\n        <div>\n            <div>\n                <Card className=\"summary-card\" onClick={openModal}>\n                    <div>\n                        <div className=\"indicator\">\n                            <div className=\"label-indicator\"></div>\n                            <div className=\"exp-indicator\"></div>\n                        </div>\n                        <Card.Img variant=\"top\" className=\"photo-container\" ref={imageRef} />\n                    </div>\n                    <Card.Body>\n                        {/* <Card.Title>Card Title</Card.Title> */}\n                        <Card.Text>\n                            <b>Label: </b>\n                            <p>{ labelName }</p>\n                        </Card.Text>\n                        {/* <Button variant=\"primary\">Go somewhere</Button> */}\n                    </Card.Body>\n                </Card>\n            </div>\n            {/* Modal */}\n            <div className=\"modal fade\" id=\"myModal\">\n                <Modal className=\"itemModal\" dialogClassName=\"modal-90w\" show={ modalOpen } onHide={closeModal}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Inputted Explanation</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div>\n                            <h5>Original Image</h5>\n                            <img className=\"modalImage\" ref={ orgImgRef } />\n                            <h5>Image Through Explainability Model</h5>\n                            <img className=\"modalImage\" ref={ modelImgRef } />\n                        </div>\n                        <div>\n                            <h5>Label</h5>\n                            <p>{ labelName }</p>\n                        </div>\n                        <div>\n                            <h5>Explanation</h5>\n                            <p>{ explanation }</p>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={ closeModal }>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport './Summary.css'\n\n// pages\nimport SummaryCard from '../Summary/SummaryCard'\n\n// bootstrap components\nimport Button from 'react-bootstrap/Button'\n\nexport default function Summary(props) {\n    const allData = props.totalData;\n    // filter data according to the data\n    const tab1Data = allData.filter(data => data.agreeLabel == 1 && data.agreeExp == 1);\n    const tab2Data = allData.filter(data => data.agreeLabel == 1 && data.agreeExp == 0);\n    const tab3Data = allData.filter(data => data.agreeLabel == 0 && data.agreeExp == 1);\n    const tab4Data = allData.filter(data => data.agreeLabel == 0 && data.agreeExp == 0);\n\n    return (\n        <div>\n            <h2>Your Observations Summary</h2>\n            <div className=\"summary-container\">\n                <div className=\"crcLabelcrcExp\">\n                    <div className=\"top-bar\">\n                        <p><b>Tab 1</b></p>\n                        <p>Correct Label, Correct Explanation</p>\n                    </div>\n                    <div className=\"scrollable-summary\">\n                        {/* for correct label and explanation */}\n                        { tab1Data.map((data, i) => \n                            <SummaryCard key={i} data={data} />\n                        )}\n                    </div>\n                </div>\n                <div className=\"crcLabelWrngExp\">\n                    <div className=\"top-bar\">\n                        <p><b>Tab 2</b></p>\n                        <p>Correct Label, Wrong Explanation</p>\n                    </div>\n                    <div className=\"scrollable-summary\">\n                        {/* for correct label and explanation */}\n                        { tab2Data.map((data, i) => \n                            <SummaryCard key={i} data={data} />\n                        )}\n                    </div>\n                </div>\n                <div className=\"wrngLabelcrcExp\">\n                    <div className=\"top-bar\">\n                        <p><b>Tab 3</b></p>\n                        <p>Wrong Label, Correct Explanation</p>\n                    </div>\n                    <div className=\"scrollable-summary\">\n                        {/* for correct label and explanation */}\n                        { tab3Data.map((data, i) => \n                            <SummaryCard key={i} data={data} />\n                        )}\n                    </div>\n                </div>\n                <div className=\"wrngLabelWrngExp\">\n                    <div className=\"top-bar\">\n                        <p><b>Tab 4</b></p>\n                        <p>Wrong Label, Wrong Explanation</p>\n                    </div>\n                    <div className=\"scrollable-summary\">\n                        {/* for correct label and explanation */}\n                        { tab4Data.map((data, i) => \n                            <SummaryCard key={i} data={data} />\n                        )}\n                    </div>\n                </div>\n            </div>\n\n            <div>\n                <h2>Share your Model with Other Users</h2>\n                <div className=\"share-container\">\n                    <div>\n                        <p>Test Another Set of Images</p>\n                        <Button variant=\"primary\" onClick={props.triggerResetFunction}>Test More Images</Button>\n                    </div>\n                    <div>\n                        <p>Want to share your findings with other users? Upload to database.</p>\n                        <Button variant=\"primary\">Share Findings</Button>\n                    </div>\n                    <div>\n                        <p>Explore what other users have found!</p>\n                        <Button variant=\"primary\">Explore Database</Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport './LabelPage.css'\n\n// pages\nimport Card from '../ChooseModel/Card'\n\nexport default function LabelPage(props) {\n    const [allData, setAllData] = useState(props.data);\n\n    // received changed data from Card whenever the agree value is changed\n    // assign it to the editAgreeId\n    const sendChangedData = (data) => {\n        const updatedList = allData.map(eachCard => {\n            // if they have the same id\n            if (eachCard.id == data.id) {\n                let item = eachCard;\n                item.agreeLabel = data.agreeLabel;\n            }\n            return eachCard\n        });\n        setAllData(updatedList);\n    }\n\n    // send data everytime the allData list is updated\n    useEffect(() => {\n        props.updateAllData(allData);\n        // console.log(\"radio button changed\");\n    }, [allData]);\n\n\n    // Apply ML here\n    const getLabel = () => {\n\n    }\n\n    return (\n        <div>\n            { allData.map((item) => \n                <div key={item.id}>\n                    <Card name = {item.id} data = {item.data} label=\"\" agreeValue = {item.agreeLabel} sendChangedData = { sendChangedData } />\n                </div>\n            )}\n        </div>\n    )\n}\n","import React, { useState, useRef } from 'react'\nimport './MasterUpload.css'\n\n// bootstrap component\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\n\n// Pages\nimport Progress from '../Banner/Progress'\nimport DropZone from '../DropZone/DropZone'\nimport GiveExplanation from '../GiveExplanation/GiveExplanation'\nimport Summary from '../Summary/Summary'\nimport LabelPage from '../LabelPage/LabelPage'\n\nexport default function MasterUpload() {\n    const [currentStep, setCurrentStep] = useState(0); //current step\n    const [uploadImages, setUploadedImages] = useState([]); //the uploaded images from the dropzone\n    const [validNext, setValidNext] = useState(false); //whether next is disabled or not\n    const [allData, setAllData] = useState([]); //holds all the cards and their id, data, and agreeValues\n    const [improvement, updateImprovement] = useState(\"\");\n\n    // check when to make next button appear\n    const handleNext = (step) => {\n        const nextStep = currentStep + 1;\n        //So it doesnt go beyond bounds\n        if (currentStep >= 3) {\n            setCurrentStep(3);\n        }\n        \n        else {\n            setCurrentStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    };\n      \n    // check when to make previous button appear\n    const handleBack = () => {\n        const nextStep = currentStep - 1;\n        //So it doesnt go beyond bounds\n        if (currentStep == 0) {\n            setCurrentStep(0);\n        }\n        else {\n            setCurrentStep((prevActiveStep) => prevActiveStep - 1);\n        }\n    };  \n\n    // received changed data from Card whenever the agree value is changed\n    // assign it to the editAgreeId\n    const sendChangedData = (data) => {\n        const updatedList = allData.map(eachCard => {\n            // if they have the same id\n            if (eachCard.id == data.id) {\n                let item = eachCard;\n                item.agreeLabel = data.agreeLabel;\n            }\n            return eachCard\n        });\n        setAllData(updatedList);\n        // console.log(\"all cards\");\n        // console.log(allData);\n    }\n\n    const updateAllData = (updatedList) => {\n        setAllData(updatedList);\n    }\n\n    //toggle whether to disable next or not\n    const checkNext = (validity) => {\n        setValidNext(validity);\n    }\n\n    // gets images from the dropzone and saves it in the local uploaded images value\n    const getImages = (imageList) => {\n        setUploadedImages(imageList);\n    }\n\n    // add cards to the global card list\n    const addData = (data) => {\n        setAllData(prevArray => [...prevArray, data]);\n        // console.log(allData);\n    }\n\n    // delete a card item in the global card list\n    const deleteItem = (name) => {\n        const modifiedList = allData.filter(eachCard => {\n            return eachCard.id !== name;\n        })\n        setAllData(modifiedList);\n    }\n\n    // update the value taken from explanation page\n    const sendExpToMasterUpload = (updatedList) => {\n        setAllData(updatedList);\n    }\n\n    // get value from giveExplanation and update improvement\n    const sendImprovement = (data) => {\n        updateImprovement(data);\n    }\n\n    // Resetting the reset function\n    const triggerResetFunction = () => {\n        setCurrentStep(0);\n        setUploadedImages([]);\n        setAllData([]);\n        setValidNext(false);\n        updateImprovement(\"\");\n    }\n\n    // render next button\n    const getNextButton = (currentStep) => {\n        if (currentStep == 3) {\n            return (\n                \"\"\n            )\n        }\n        else if (validNext && currentStep < 3) {\n            return (\n                <Button id=\"nextBtn\" className=\"btn btn-secondary\" type=\"button\" onClick={ handleNext }>Next</Button>\n            )\n        }\n        else {\n            return (\n                <Button disabled id=\"nextBtn\" className=\"btn btn-secondary\" type=\"button\" onClick={ handleNext }>Next</Button>\n            )\n        }\n    }\n\n    const getPrevButton = (currentStep) => {\n        if (currentStep > 0) {\n            return (\n                <Button className=\"prevBtn btn btn-secondary\" type=\"button\" onClick={ handleBack }>Previous</Button>\n            )\n        }\n        else {\n            return \"\"\n        }\n    }\n\n    console.log(\"all data\");\n    console.log(allData);\n\n    // console.log(\"improvement\");\n    // console.log(improvement);\n\n    return (\n        <div>\n            <div>\n                <h1>Step: { currentStep + 1 }</h1>\n                <div className=\"progress-button\">\n                    <Progress currentStep = { currentStep } />\n                    <div className=\"nextPrev-btn\">\n                        { getPrevButton(currentStep) }\n                        { getNextButton(currentStep) }\n                    </div>\n                </div>\n            </div>\n            <div>\n                { currentStep == 0 ? <DropZone addData = { addData } getImages = {getImages} checkNext = { checkNext } currentStep = { currentStep } getDeletedItem = { deleteItem }/> : \"\"}\n                { currentStep == 1 ? <LabelPage data={ allData } updateAllData = { updateAllData } /> : \"\"}\n                { currentStep == 2 ? <GiveExplanation data={allData} sendImprovement={ sendImprovement } sendExpToMasterUpload = { sendExpToMasterUpload } improvement = { improvement }/> : \"\" }\n                { currentStep == 3 ? <Summary totalData={allData} triggerResetFunction={triggerResetFunction} /> : \"\"}\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation'\nimport {\n  BrowserRouter as Router,\n  Switch, \n  Link,\n  Route\n} from 'react-router-dom';\n\n// Pages\nimport GetStarted from './components/GetStarted/GetStarted';\nimport Upload from './components/ApplyModels/Upload'\nimport Explore from './components/Explore/Explore'\nimport MasterUpload from './components/MasterUpload/MasterUpload'\n\nfunction App() {\n  return (\n    <div>\n      <Navigation />\n\n      <Router>\n        <Switch>\n          <Route exact path=\"/hai-platform/getStarted\" component ={GetStarted} />\n          <Route path=\"/hai-platform/upload\" component ={MasterUpload} />\n          <Route path=\"/hai-platform/explore\" component = {Explore} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}