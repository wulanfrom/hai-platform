{"version":3,"sources":["components/Banner/Banner.js","components/GetStarted/GetStarted.js","components/Banner/Progress.js","components/ApplyModels/Upload.js","components/Explore/Explore.js","components/Navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Banner","className","GetStarted","Button","href","type","useStyles","makeStyles","theme","root","width","button","marginRight","spacing","instructions","marginTop","marginBottom","Progress","classes","React","useState","activeStep","setActiveStep","Set","steps","Stepper","map","label","index","labelProps","Step","key","StepLabel","length","Typography","onClick","step","getStepContent","disabled","prevActiveStep","variant","color","Upload","Explore","Navigation","Navbar","collapseOnSelect","bg","Brand","Nav","Link","Component","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea771bb3.chunk.js","sourcesContent":["import React from 'react'\nimport '../../App.css'\n\nexport default function Banner() {\n    return (\n        <div className=\"banner-wrapper p-4\">\n            <h1>Welcome to the XAI Platform</h1>\n            <p>This platform allows you to upload pictures and apply explainability models to it. You will work with methods for explaining model predictions in image classification tasks. Such explanations help users resolve questions around whatâ€™s happening inside of the classification model and why. As users explore these explanations, they may come up with additional questions about the model, which possibly requires other kinds of explanations.</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport Banner from '../Banner/Banner'\n\n// Bootstrap components\nimport Button from 'react-bootstrap/Button'\n\nexport default function GetStarted() {\n    return (\n        <div>\n            <Banner />\n            \n            <div className=\"proceed-wrapper p-4\">\n                <h2>What Should I Do?</h2>\n                <ul className=\"what-to-do ml-5\">\n                    <li>\n                        <p>Try the platform with several pictures</p>\n                        <p>Does the model label them correctly?</p>\n                    </li>\n                    <li>\n                        <p>Apply explainability models to those pictures.</p>\n                        <p>Did you find any image for which the algorithm does not give an explanation that is easy to understand for users?</p>\n                    </li>\n                    <li>\n                        <p>Is the explanation sufficient to trust the model predictions?</p>\n                        <p>When is it sufficient? When is it not sufficient? </p>\n                    </li>\n                    <li>\n                        <p>For insufficient predictions, what can you do to make the model label it correctly?</p>\n                        <p>What kinds of additional information would you include in your explanation?</p>\n                    </li>\n                </ul>\n                <div className=\"mx-auto\">\n                    <Button href=\"/applyModels\" type=\"button\" className=\"getStarted-btn\">Get Started</Button>\n                </div>\n                <hr></hr>\n\n                <h2 className=\"mt-4\">Explore What Others Found</h2>\n                <p>Explore the observations done by other users and compare it to yours.</p>\n                <Button href=\"/explore\" className=\"explore-btn\">Explore</Button>\n\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction getSteps() {\n  return ['UPLOAD', 'APPLY MODEL', 'GET EXPLANATION', 'SUMMARIZE & SHARE'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Upload pictures to apply the model on';\n    case 1:\n      return 'Label model to pictures';\n    case 2:\n      return 'Does the explanation make sense?';\n    case 3:\n      return 'What did you learn?';\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function Progress() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          const stepProps = {};\n          const labelProps = {};\n          return (\n            <Step key={label} {...stepProps}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n\n      {/* The lower part with buttons and caption */}\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className={classes.instructions}>\n              All steps completed - you&apos;re finished\n            </Typography>\n            <Button onClick={handleReset} className={classes.button}>\n              Reset\n            </Button>\n          </div>\n        ) : (\n          <div>\n            <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n            <div>\n              <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                Back\n              </Button>\n\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleNext}\n                className={classes.button}\n              >\n                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\nimport Progress from '../Banner/Progress'\n\nexport default function Upload() {\n    return (\n        <div>\n            <h1>Upload pictures</h1>\n            <Progress />\n        </div>\n    )\n}\n","import React from 'react'\nimport Progress from '../Banner/Progress'\n\nexport default function Explore() {\n    return (\n        <div>\n            <h1>Explore Page</h1>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport {\n    BrowserRouter as Router,\n    Switch, \n    Link,\n    Route\n} from 'react-router-dom';\n\n\n// Pages\nimport GetStarted from '../GetStarted/GetStarted'\nimport Upload from '../ApplyModels/Upload'\nimport Explore from '../Explore/Explore'\n\n\nexport default class Navigation extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar collapseOnSelect bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href=\"/getStarted\">XAIPlatform</Navbar.Brand>\n                    <Nav className=\"ml-auto\">\n                        <Nav.Link href=\"/getStarted\">GET STARTED</Nav.Link>\n                        <Nav.Link href=\"/applyModels\">APPLY MODELS</Nav.Link>\n                        <Nav.Link href=\"/explore\">EXPLORE</Nav.Link>\n                    </Nav>\n                </Navbar>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation'\nimport {\n  BrowserRouter as Router,\n  Switch, \n  Link,\n  Route\n} from 'react-router-dom';\n\n// Pages\nimport GetStarted from './components/GetStarted/GetStarted';\nimport Upload from './components/ApplyModels/Upload'\nimport Explore from './components/Explore/Explore'\n\nfunction App() {\n  return (\n    <div>\n      <Navigation />\n\n      <Router>\n        <Switch>\n          <Route exact path=\"/getStarted\" component ={GetStarted} />\n          <Route path=\"/applyModels\" component ={Upload} />\n          <Route path=\"/explore\" component = {Explore} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}